/*!
 * An interactive post widget for the "Summary" post type. Displays a summary of the current Tropical Weather from the
 * National Hurricane Center:
 * - Tropical Weather Outlook (TWO) - The potential areas of tropical development
 * - Automatic Tropical Cyclone Forecast (ATCF) - The detailed data generated by the ATCF for active storms
 * - Tropical Cyclone Plan of the Day (TCPOD) - The Hurricane Hunter recon schedule for missions into active storms
 *
 * Author: u/Beach-Brews
 * License: BSD-3-Clause
 */

import {Context, Devvit, useAsync, useState} from "@devvit/public-api";
import {MenuItem} from './MenuItem.js';
import {TwoPage} from "./two/TwoPage.js";
import {AtcfPage} from "./atcf/AtcfPage.js";
import {TcpodPage} from "./tcpod/TcpodPage.js";
import {RedisService} from "../../devvit/redis/RedisService.js";
import {LoadingOrError} from "../LoadingOrError.js";
import {SummaryApiDto} from "../../../shared/dtos/redis/summary-api/SummaryApiDtos.js";
import {AppSettings, MaintenanceLevel, SettingsEnvironment} from "../../devvit/AppSettings.js";
import {Announcement} from "./common/Announcement.js";
import {CurrentStorm} from "./common/CurrentStorm.js";

export interface SummaryWidgetProps {
    context: Context;
}

export const SummaryWidget = (props: SummaryWidgetProps) => {
    const [activePage, setActivePage] = useState('TWO');

    const {data, loading, error} = useAsync(
        async () => {
            // Create Redis service
            const redis = new RedisService(props.context.redis);

            // Get API last modified
            const lastMod = await redis.getSummaryApiLastModified();
            if (!lastMod)
                throw new Error('Failed to load LastModified from Redis.');

            // Fail if not a valid date string
            const date = new Date(lastMod);
            if (!date || isNaN(date.getTime()))
                throw new Error(`[Summary Post] LastModified date of ${lastMod} was invalid`);

            // Check last modified is < {setting} hours ago
            const staleSetting = await AppSettings.GetStaleHours(props.context.settings);
            const saleTime = new Date().getTime() - staleSetting * 3600000;
            if (date.getTime() < saleTime)
                throw new Error(`[Summary Post] API Data is stale, last modified at ${lastMod} which is over ${staleSetting} hours ago!`);

            // Get whether is the development data environment or not
            const isDev = (await AppSettings.GetEnvironment(props.context.settings)) !== SettingsEnvironment.Production;
            const maintenanceMode = await AppSettings.GetMaintenanceMode(props.context.settings);
            const maintenanceMessage = await AppSettings.GetMaintenanceModeMessage(props.context.settings);

            // Finally, fetch the actual data!
            const summaryApiData = await redis.getSummaryApiData();

            return { isDev, summaryApiData, maintenanceMode, maintenanceMessage };
        },
        {
            finally: (_, error) => {
                if (error)
                    console.error('[RHurricane Summary Load] - Error fetching summary data: ', error);
            }
        }
    );
    const loaded = !loading && !error;
    const apiData: SummaryApiDto | null = data?.summaryApiData ?? null;

    // Setup app announcement
    const now = new Date().getTime();
    let announcement = data && data.maintenanceMode === MaintenanceLevel.Soft
        ? (<Announcement>{data.maintenanceMessage ? data.maintenanceMessage : 'App maintenance underway.'}</Announcement>)
        : apiData && !!apiData.message && apiData.message.start <= now && apiData.message.end >= now
            ? (<Announcement colorScheme={apiData.message.colorScheme}>{apiData.message.text}</Announcement>)
            : null;

    return (
        <zstack width="100%" height="100%">
            <vstack padding="small" width="100%" height="100%" gap="small" grow lightBackgroundColor="Global-White" darkBackgroundColor="Global-Black">
                {announcement}
                {!!apiData?.currentStorms?.data && apiData.currentStorms.data.length > 0 && (
                    <hstack width="100%" gap="small">
                        {apiData.currentStorms.data.map(s => <CurrentStorm storm={s} context={props.context} />)}
                    </hstack>
                )}
                <hstack gap="small">
                    <MenuItem activePage={activePage} disabled={loading || !!error} setActivePage={setActivePage} count={apiData?.two?.count} title="TWO" />
                    <MenuItem activePage={activePage} disabled={loading || !!error} setActivePage={setActivePage} count={apiData?.atcf?.count} title="ATCF" />
                    <MenuItem activePage={activePage} disabled={loading || !!error} setActivePage={setActivePage} count={apiData?.tcpod?.count} title="TCPOD" />
                </hstack>
                {!loaded && <LoadingOrError error={!!error} message='Loading Tropical Weather Outlook...' />}
                {loaded && activePage === 'TWO' && <TwoPage context={props.context} two={apiData?.two?.data} />}
                {loaded && activePage === 'ATCF' && <AtcfPage context={props.context} lastModified={apiData?.atcf?.lastModified} atcf={apiData?.atcf?.data} />}
                {loaded && activePage === 'TCPOD' && <TcpodPage context={props.context} lastModified={apiData?.tcpod.lastModified} tcpod={apiData?.tcpod?.data} />}
            </vstack>
            <vstack width="100%" height="100%" alignment="bottom start">
                <vstack
                    width="100%"
                    border="thin"
                    alignment="top center"
                    lightBackgroundColor="Global-White"
                    darkBackgroundColor="Global-Black"
                    onPress={() => {setActivePage('DIS')}}
                    padding="xsmall"
                >
                    {data?.isDev === true && (<text size="medium" weight="bold" color="danger-plain">TEST DATA - NOT LIVE STORM DATA</text>)}
                    <text size="medium" weight="bold">&gt; &gt; &gt; Press to review Data Disclaimer! &lt; &lt; &lt;</text>
                </vstack>
            </vstack>
            {activePage === 'DIS' && (
                <vstack width="100%" height="100%" padding="medium" alignment="top start" gap="small" lightBackgroundColor="Global-White" darkBackgroundColor="Global-Black">
                    <text style="heading" size="xlarge">Data Disclaimer</text>
                    <hstack width="100%" height="1px" lightBackgroundColor="black" darkBackgroundColor="white" />
                    <text size="xlarge" weight="bold" color="danger-plain" wrap>This app is is NOT an official government app and therefore should not be used for any decisions pertaining to your safety or security!</text>
                    <text wrap>Please visit official government channels for the most accurate information and warnings:</text>
                    <button onPress={() => { props.context.ui.navigateTo("https://nhc.noaa.gov"); }}>National Hurricane Center (NHC) (https://nhc.noaa.gov)</button>
                    <button onPress={() => { props.context.ui.navigateTo("https://www.metoc.navy.mil/jtwc/jtwc.html"); }}>Joint Typhoon Warning Center (JTWC) (https://www.metoc.navy.mil/jtwc/jtwc.html)</button>
                    <text wrap>Data obtained from the National Hurricane Center (NHC) and National Weather Service (NWS)</text>
                    <text wrap>Developed and maintained by u/Beach-Brews</text>
                    <hstack width="100%" alignment="bottom center">
                        <button width="100%" onPress={() => {setActivePage('TWO')}}>Acknowledged</button>
                    </hstack>
                </vstack>
            )}
        </zstack>
    );
};